<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>生产者消费者的一个例子</title>
    <link href="/2023/01/04/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90/"/>
    <url>/2023/01/04/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p>模拟一个餐厅的运作. 假设该餐厅有3个厨师, 5个顾客, 厨师炒一个菜需要3秒钟, 顾客吃一道菜需要4秒钟, 餐桌最多可以同时放下5道菜. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Queue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;(); <span class="hljs-comment">// 用队列模拟餐桌</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAZ_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>; <span class="hljs-comment">// 餐桌的容量</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(Main::cook, <span class="hljs-string">&quot;厨师1&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(Main::cook, <span class="hljs-string">&quot;厨师2&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(Main::cook, <span class="hljs-string">&quot;厨师3&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(Main::eat, <span class="hljs-string">&quot;顾客1&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(Main::eat, <span class="hljs-string">&quot;顾客2&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(Main::eat, <span class="hljs-string">&quot;顾客3&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(Main::eat, <span class="hljs-string">&quot;顾客4&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(Main::eat, <span class="hljs-string">&quot;顾客5&quot;</span>).start();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cook</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">3000</span>); <span class="hljs-comment">// 做菜花费3秒钟</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (queue) &#123;<br>                <span class="hljs-keyword">while</span> (queue.size() &gt;= MAZ_SIZE) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        queue.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                queue.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>                queue.notifyAll();<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;上菜了, 餐桌上还有&quot;</span> + queue.size() + <span class="hljs-string">&quot;道菜&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (queue) &#123;<br>                <span class="hljs-keyword">while</span> (queue.isEmpty()) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        queue.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                queue.poll();<br>                queue.notifyAll();<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;开始吃饭, 餐桌上还有&quot;</span> + queue.size() + <span class="hljs-string">&quot;道菜&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">4000</span>); <span class="hljs-comment">// 吃饭花费4秒钟</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>该段代码是使用线程来分别模拟厨师和顾客的行为, 需要注意几点:<br>1.使用餐桌变量<code>queue</code>时需要加锁.<br>2.顾客线程需要一直使用循环来判断<code>queue</code>是否为空, 如果为空, 需要调用<code>queue.wait()</code>来释放锁并等待; 厨师线程则需要判断<code>queue</code>是否超过了最大容量, 如果超过了, 那么也需要调用<code>queue.wait()</code>来释放锁并等待.<br>3.顾客线程吃完了一道菜之后需要调用<code>queue.notifyAll()</code>来通知厨师可以继续做菜了; 厨师线程做完一道菜之后也需要调用<code>queue.notifyAll()</code>来通知顾客上菜了.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有关BufferedInputStream类中mark方法的readlimit参数的一些理解</title>
    <link href="/2022/12/16/%E6%9C%89%E5%85%B3BufferedInputStream%E7%B1%BB%E4%B8%ADmark%E6%96%B9%E6%B3%95%E7%9A%84readlimit%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <url>/2022/12/16/%E6%9C%89%E5%85%B3BufferedInputStream%E7%B1%BB%E4%B8%ADmark%E6%96%B9%E6%B3%95%E7%9A%84readlimit%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>下面的代码使用了<code>BufferedInputStream</code>类作为输入流, 其构造方法的第二个参数<code>size</code>传入的是<code>3</code>, 这表示缓冲区大小设置为3个字节. 该类的<code>mark</code>方法的参数<code>readlimit</code>表示的是在调用<code>reset</code>方法之前可以读取的字节数的限制(若超出了这个数目则该标记可能会失效). 如下面的代码所示, <code>mark</code>的<code>readlimit</code>参数传入<code>1</code>, 并且在调用<code>reset</code>之前还读取了3个字节的数据, 但是, 调用<code>reset</code>方法时似乎仍然不会抛出异常. 实际上, 似乎只有当<code>readlimit</code>这个参数设置为大于缓冲区大小的时候, 这个参数才生效. 例如, 如果下面代码中<code>mark</code>方法传入的参数改为<code>4</code>, 此时如果再在调用<code>reset</code>方法之前读取超过4个字节的数据, 那么调用<code>reset</code>方法时就会抛出异常了. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span><br>                     <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;test.txt&quot;</span>), <span class="hljs-number">3</span>)) &#123; <span class="hljs-comment">// 给size参数传入3</span><br>            System.out.print((<span class="hljs-type">char</span>) stream.read());<br>            System.out.print((<span class="hljs-type">char</span>) stream.read());<br>            System.out.print((<span class="hljs-type">char</span>) stream.read());<br>            System.out.print((<span class="hljs-type">char</span>) stream.read());<br>            System.out.print((<span class="hljs-type">char</span>) stream.read());<br>            System.out.println((<span class="hljs-type">char</span>) stream.read());<br>            stream.mark(<span class="hljs-number">1</span>); <span class="hljs-comment">// 给readlimit参数传入1</span><br>            System.out.print((<span class="hljs-type">char</span>) stream.read());<br>            System.out.print((<span class="hljs-type">char</span>) stream.read());<br>            System.out.println((<span class="hljs-type">char</span>) stream.read());<br>            stream.reset();<br>            System.out.print((<span class="hljs-type">char</span>) stream.read());<br>            System.out.println((<span class="hljs-type">char</span>) stream.read());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Java复制文本文件</title>
    <link href="/2022/12/15/%E4%BD%BF%E7%94%A8Java%E5%A4%8D%E5%88%B6%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/"/>
    <url>/2022/12/15/%E4%BD%BF%E7%94%A8Java%E5%A4%8D%E5%88%B6%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>下面的代码的作用是复制一份文本文件(原文件为test.txt, 目标文件为result.txt): </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;test.txt&quot;</span>); <span class="hljs-type">FileWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;result.txt&quot;</span>)) &#123;<br>            <span class="hljs-type">char</span>[] charBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">5</span>]; <span class="hljs-comment">// 每次读取5个字符</span><br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-keyword">while</span> ((len = reader.read(charBuffer)) != -<span class="hljs-number">1</span>) &#123;<br>                writer.write(charBuffer, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码使用了FileReader和FileWriter两个文件字符流的类. </p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Java复制文件</title>
    <link href="/2022/12/14/%E4%BD%BF%E7%94%A8Java%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/"/>
    <url>/2022/12/14/%E4%BD%BF%E7%94%A8Java%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>下面的代码作用是复制一份test1.mp4文件(复制出来的文件名称为test2.mp4): </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;test1.mp4&quot;</span>); <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;test2.mp4&quot;</span>)) &#123;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-keyword">while</span> ((len = in.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                out.write(bytes, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
